function _precompile_()
    ccall(:jl_generating_output, Cint, ()) == 1 || return nothing
    Base.precompile(Tuple{Core.kwftype(typeof(Type)),NamedTuple{(:name, :study_id),Tuple{Nothing,Nothing}},Type{CTScanner{FBP,M} where M},FanBeamGeometry{Float32,DefaultTomograph},CTImage{Array{Float32,2}}})
    Base.precompile(Tuple{Core.kwftype(typeof(Type)),NamedTuple{(:name, :study_id),Tuple{Nothing,Nothing}},Type{CTScanner{FBP,M} where M},FanBeamGeometry{Float64,DefaultTomograph},CTImage{Array{Float64,2}}})
    Base.precompile(Tuple{Core.kwftype(typeof(Type)),NamedTuple{(:name, :study_id),Tuple{Nothing,Nothing}},Type{CTScanner{FBP,M} where M},ParallelBeamGeometry{Float32,DefaultTomograph},CTImage{Array{Float32,2}}})
    Base.precompile(Tuple{Core.kwftype(typeof(Type)),NamedTuple{(:name, :study_id),Tuple{Nothing,Nothing}},Type{CTScanner{FBP,M} where M},ParallelBeamGeometry{Float64,DefaultTomograph},CTImage{Array{Float64,2}}})
    Base.precompile(Tuple{Core.kwftype(typeof(Type)),NamedTuple{(:name, :study_id),Tuple{Symbol,String}},Type{CTScanner},FBP{ParallelBeamGeometry{Float32,DefaultTomograph},Marta.Filters.RamLak},Marta.CTData.GrayScaleData{Array{Float32,2}}})
    Base.precompile(Tuple{Core.kwftype(typeof(Type)),NamedTuple{(:nϕ,),Tuple{Int64}},Type{FanBeamGeometry},GrayScaleLine{Float32}})
    Base.precompile(Tuple{Core.kwftype(typeof(Type)),NamedTuple{(:nϕ,),Tuple{Int64}},Type{FanBeamGeometry},GrayScaleLine{Float64}})
    Base.precompile(Tuple{Core.kwftype(typeof(Type)),NamedTuple{(:nϕ,),Tuple{Int64}},Type{ParallelBeamGeometry},GrayScaleLine{Float32}})
    Base.precompile(Tuple{Core.kwftype(typeof(Type)),NamedTuple{(:width,),Tuple{Int64}},Type{GrayScaleLine},Type{Float32}})
    Base.precompile(Tuple{Core.kwftype(typeof(Type)),NamedTuple{(:width,),Tuple{Int64}},Type{GrayScaleLine},Type{Float64}})
    Base.precompile(Tuple{Core.kwftype(typeof(Type)),NamedTuple{(:width,),Tuple{Int64}},Type{GrayScalePyramid},Type{Float32}})
    Base.precompile(Tuple{Core.kwftype(typeof(Type)),NamedTuple{(:width,),Tuple{Int64}},Type{GrayScalePyramid},Type{Float64}})
    Base.precompile(Tuple{Core.kwftype(typeof(Type)),NamedTuple{(:width,),Tuple{Int64}},Type{WhiteRect},Type{Float32}})
    Base.precompile(Tuple{Marta.FanBeam.var"#103#threadsfor_fun#3"{Float32,Int64,Array{Float32,2},Float32,Float32,Float32,Float32,Float32,Marta.FanBeam.var"#compute_value#2"{Float32,Int64,Int64,Marta.Interpolation.BilinearInterpolation{Array{Float32,2}},Float32,Float32,Float32},UnitRange{Int64}}})
    Base.precompile(Tuple{Marta.FanBeam.var"#122#threadsfor_fun#13"{Float32,Int64,Array{Float32,2},Float32,Float32,Float32,Float32,Float32,Marta.FanBeam.var"#compute_value#12"{Float32,Int64,Int64,Marta.Interpolation.BilinearInterpolation{Array{Float32,2}},Float32,Float32,Float32},UnitRange{Int64}}})
    Base.precompile(Tuple{Marta.FanBeam.var"#122#threadsfor_fun#13"{Float64,Int64,Array{Float64,2},Float64,Float64,Float64,Float64,Float64,Marta.FanBeam.var"#compute_value#12"{Float64,Int64,Int64,Marta.Interpolation.BilinearInterpolation{Array{Float64,2}},Float64,Float64,Float64},UnitRange{Int64}}})
    Base.precompile(Tuple{Type{CTScanner{FBP,M} where M},GrayScaleLine{Float32}})
    Base.precompile(Tuple{Type{CTScanner{FBP,M} where M},GrayScaleLine{Float64}})
    Base.precompile(Tuple{typeof(calibrate_tomogram),CTScanner{FBP{ParallelBeamGeometry{Float32,DefaultTomograph},Marta.Filters.RamLak},Array{Float32,2}},GrayScaleLine{Float32}})
    Base.precompile(Tuple{typeof(calibrate_tomogram),CTScanner{FBP{ParallelBeamGeometry{Float32,DefaultTomograph},Marta.Filters.RamLak},Array{Float32,2}},ImageParams{Float32}})
    Base.precompile(Tuple{typeof(calibrate_tomogram),CTScanner{FBP{ParallelBeamGeometry{Float64,DefaultTomograph},Marta.Filters.RamLak},Array{Float64,2}},ImageParams{Float64}})
    Base.precompile(Tuple{typeof(project_image),Some{CTImage{Array{Float32,2}}},Radon{FanBeamGeometry{Float32,DefaultTomograph}}})
    Base.precompile(Tuple{typeof(project_image),Some{CTImage{Array{Float32,2}}},Radon{ParallelBeamGeometry{Float32,DefaultTomograph}}})
    Base.precompile(Tuple{typeof(project_image),Some{CTImage{Array{Float64,2}}},Radon{FanBeamGeometry{Float64,DefaultTomograph}}})
    Base.precompile(Tuple{typeof(project_image),Some{CTImage{Array{Float64,2}}},Radon{ParallelBeamGeometry{Float64,DefaultTomograph}}})
    isdefined(Marta.AbstractAlgorithms, Symbol("#14#16")) && Base.precompile(Tuple{getfield(Marta.AbstractAlgorithms, Symbol("#14#16")),CTSinogram{Array{Float32,2}}})
    isdefined(Marta.AbstractAlgorithms, Symbol("#14#16")) && Base.precompile(Tuple{getfield(Marta.AbstractAlgorithms, Symbol("#14#16")),CTSinogram{Array{Float64,2}}})
end
